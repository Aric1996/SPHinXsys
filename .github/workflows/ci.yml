name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VCPKG_VERSION: "1c5a340f6e10985e2d92af174a68dbd15c1fa4e1" # 29/05/2023 commit at https://github.com/microsoft/vcpkg/pull/29067
  CTEST_PARALLEL_LEVEL: "1"

# A workflow is made up of one or more jobs that can run sequentially or in parallel
jobs:

  ###############################################################################

  Linux:
    runs-on: ubuntu-22.04
    env:
      VCPKG_DEFAULT_TRIPLET: x64-linux

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt update 
          sudo apt install -y \
            apt-utils \
            build-essential \
            curl zip unzip tar `# when starting fresh on a WSL image for bootstrapping vcpkg`\
            pkg-config `# for installing libraries with vcpkg`\
            git \
            cmake \
            ninja-build

      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}

      - uses: friendlyanon/setup-vcpkg@v1 # Setup vcpkg into ${{github.workspace}}
        with: 
          committish: ${{ env.VCPKG_VERSION }}
          cache-version: ${{env.VCPKG_VERSION}}

      - name: Install dependencies
        run: |
          ${{github.workspace}}/vcpkg/vcpkg install --clean-after-build openblas[dynamic-arch] --allow-unsupported # last argument to remove after regression introduced by microsoft/vcpkg#30192 is addressed
          # Simbody depends on (open)blas implementation, which -march=native by default, conflicting with cache restore, hence dynamic-arch feature
          # Above problem might also be resolved by adding the hash of architecture in the cache key, esp. if more package do the same
          ${{github.workspace}}/vcpkg/vcpkg install --clean-after-build \
            eigen3 \
            tbb \
            boost-program-options \
            boost-geometry \
            simbody \
            gtest \
            xsimd \
            pybind11

      - name: Generate buildsystem using single (No test)
        run: |
          cmake -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D SPHINXSYS_USE_FLOAT=ON \
            -D CMAKE_TOOLCHAIN_FILE="${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -D SPHINXSYS_CI=ON \
            -S ${{github.workspace}} \
            -B ${{github.workspace}}/build
            
      - name: Build using single
        run: cmake --build build --config Release --verbose

      - name: Generate buildsystem using double 
        run: |
          cmake -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D SPHINXSYS_USE_FLOAT=OFF \
            -D CMAKE_TOOLCHAIN_FILE="${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -D SPHINXSYS_CI=ON \
            -S ${{github.workspace}} \
            -B ${{github.workspace}}/build
            
      - name: Build using double
        run: cmake --build build --config Release --verbose

      - name: Test with the first try
        id: first-try
        run: |
          cd build 
          ctest  --output-on-failure
        continue-on-error: true

      - name: Test with the second try for failed cases
        id: second-try
        if: ${{ steps.first-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the third try for failed cases
        id: third-try
        if: ${{ steps.second-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the fourth try for failed cases
        id: fourth-try
        if: ${{ steps.third-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the last try for failed cases
        if: ${{ steps.fourth-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure