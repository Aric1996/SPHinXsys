name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow is made up of one or more jobs that can run sequentially or in parallel
jobs:

  ###############################################################################

  Linux:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
            
      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          echo "This step should not be executed when commit message contains [ci skip]"        
          sudo apt-get update 
          sudo apt-get install -y apt-utils \
          build-essential \
          cmake \
          libgtest-dev \
          libtbb-dev \
          libboost-all-dev \
          libeigen3-dev \
          liblapack-dev \
          wget \
          unzip
          cd /home/runner/ && wget "https://github.com/Virtonomy/simbody/releases/download/Simbody-3.7.1/simbody_v3.7.1.zip"
          unzip "simbody_v3.7.1.zip"
          export TBB_HOME=/usr/lib/x86_64-linux-gnu
          export BOOST_HOME=/usr/lib/x86_64-linux-gnu
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make -j$(nproc)
          cd /home/runner/work/SPHinXsys/SPHinXsys
          git submodule update --init
          mkdir build
          cd build 
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSIMBODY_HOME=/home/runner/simbody
          make -j$(nproc)

      - name: Test with the first try
        id: first-try
        run: |
          cd /home/runner/work/SPHinXsys/SPHinXsys
          cd build 
          ctest  --output-on-failure
        continue-on-error: true

      - name: Test with the second try for failed cases
        id: second-try
        if: ${{ steps.first-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the third try for failed cases
        id: third-try
        if: ${{ steps.second-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the fourth try for failed cases
        id: fourth-try
        if: ${{ steps.third-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the last try for failed cases
        if: ${{ steps.fourth-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure

  ###############################################################################

  Windows:
    runs-on: windows-latest
    env:
      VCPKG_VERSION: "2022.11.14"
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - uses: actions/checkout@v3 # Checks-out the repository under ${{github.workspace}}

      - uses: friendlyanon/setup-vcpkg@v1 # Setup vcpkg into ${{github.workspace}}
        with: 
          committish: ${{ env.VCPKG_VERSION }}

      - name: Install dependencies
        run: |
          ${{github.workspace}}\vcpkg\vcpkg.exe install `
            eigen3 `
            tbb `
            boost-program-options `
            boost-geometry `
            simbody `
            gtest

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Generate buildsystem
        run: |
          cmake.exe -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}\vcpkg\scripts\buildsystems\vcpkg.cmake" `
            -S ${{github.workspace}} `
            -B ${{github.workspace}}\build
      
      - name: Build
        run: cmake.exe --build ${{github.workspace}}\build --config Release

      - name: Test with the first try
        id: first-try
        run: |
          cd build 
          ctest.exe --output-on-failure
        continue-on-error: true

      - name: Test with the second try for failed cases
        id: second-try
        if: ${{ steps.first-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the third try for failed cases
        id: third-try
        if: ${{ steps.second-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the fourth try for failed cases
        id: fourth-try
        if: ${{ steps.third-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
        continue-on-error: true

      - name: Test with the last try for failed cases
        if: ${{ steps.fourth-try.outcome == 'failure' }} 
        run: |
          cd build 
          ctest --rerun-failed --output-on-failure
